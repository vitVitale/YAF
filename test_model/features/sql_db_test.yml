---
epic: Python ST framework
feature: POSTGRESQL checks

setup:
  each:
    before:
      - command: Execute changing request in DB-localDB
        params:
          text: |-
            SET search_path TO data_pipe_cache;
          expected: 'NO CHANGES ALLOWED'
    after:
      - command: Execute changing request in DB-localDB
        params:
          text: |-
            DELETE FROM person
            WHERE id NOT BETWEEN 1 AND 3
          expected: 'NO CHANGES ALLOWED'


########################################################################################################################

tests:
  - name: Test with Postgres DB (CRUD ops)
    flaky: 1
    test_data:
      - { first_name: 'Dima', last_name: 'Velikiy', like_name: 'elik' }
      - { first_name: 'Serega', last_name: 'Lusanov', like_name: 'san' }
      - { first_name: 'Olga', last_name: 'Timchenko', like_name: 'chen' }
    steps:
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT * FROM person
          expected: 'NOT EMPTY'
      - command: Execute changing request in DB-localDB
        params:
          text: |-
            INSERT INTO person ("id","firstname","lastname","state","username")
            values ({{ REGEX [1-9][0-9] }},'{{ first_name }}','{{ last_name }}','Y',NULL)
          expected: 'ONLY WITH CHANGES'
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT firstname, lastname FROM person WHERE username IS NULL
          expected: 'NOT EMPTY'
      - command: Execute changing request in DB-localDB
        params:
          text: |-
            UPDATE person SET lastname = 'Beliy' WHERE id NOT IN (1, 2, 3)
          expected: 'ONLY WITH CHANGES'
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT * FROM person WHERE lastname LIKE '%{{ like_name }}%'
          expected: 'EMPTY'
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT * FROM person
          expected: 'NOT EMPTY'

########################################################################################################################

  - name: Test with Postgres DB (templates and checks)
    flaky: 3
    steps:
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT * FROM person
          expected: 'NOT EMPTY'
      - command: Check SQL response values-SQL_RS_1
        params:
          text: |-
            ROW: ALL
            COLUMN: firstname
          expected: 'REGEX (Gregor|Elena|Vitaly)'
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT * FROM person WHERE lastname = '{{ SQL_RS_1 ROW: 3 COLUMN: lastname }}'
          expected: 'NOT EMPTY'
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT * FROM person WHERE firstname IN ({{ SQL_RS_1 ROW: ALL COLUMN: firstname }});
          expected: 'NOT EMPTY'
      - command: Check SQL response values-SQL_RS_3
        params:
          text: |-
            ROW: 2
            COLUMN: lastname
          expected: 'Truehanovich'
      - command: Check SQL response values-SQL_RS_3
        params:
          text: |-
            COLUMN: username
          expected: 'REGEX .+Guy'

########################################################################################################################

  - name: Test with Postgres DB (check truncation attachment)
    steps:
      - command: Execute searching request in DB-localDB
        params:
          text: |-
            SELECT * FROM abc_logs ORDER BY "userId" DESC;
          expected: 'NOT EMPTY'
